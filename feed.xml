<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://giovannibriglia.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://giovannibriglia.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-08-17T15:08:05+00:00</updated><id>https://giovannibriglia.github.io/feed.xml</id><title type="html">blank</title><subtitle>I am Robotics Engineer graduated at the University of Modena and Reggio Emilia (IT). From November &apos;24 I will be PhD student at the University of Pisa. My focus comprehends Causal Reinforcement Learning. </subtitle><entry><title type="html">Judea Pearl on planning under uncertainty</title><link href="https://giovannibriglia.github.io/blog/2024/planning-under-uncertainty-pearl/" rel="alternate" type="text/html" title="Judea Pearl on planning under uncertainty"/><published>2024-08-17T00:00:00+00:00</published><updated>2024-08-17T00:00:00+00:00</updated><id>https://giovannibriglia.github.io/blog/2024/planning-under-uncertainty-pearl</id><content type="html" xml:base="https://giovannibriglia.github.io/blog/2024/planning-under-uncertainty-pearl/"><![CDATA[<p><a class="citation" href="#pearl1994probabilistic">(Pearl, 1994)</a></p> <blockquote> <p>Probabilistic methods, especially those based on graphical models, have proven useful in tasks of prediction, abduction and belief revision.</p> <p>In planning, however, they are less popular, partly due to the unsettled, strange relationship between probability and actions. In principle, actions are not part of standard probability theory, and understandably so: probabilities capture normal relationships in the world, while actions represent interventions that perturb those relationships.</p> <p>~Judea Pearl</p> </blockquote>]]></content><author><name></name></author><category term="work"/><category term="citation"/><summary type="html"><![CDATA[A probabilistic calculus of actions]]></summary></entry><entry><title type="html">Implement Causal Inference with pgmpy</title><link href="https://giovannibriglia.github.io/blog/2024/causal-inference-pgmpy/" rel="alternate" type="text/html" title="Implement Causal Inference with pgmpy"/><published>2024-08-13T00:00:00+00:00</published><updated>2024-08-13T00:00:00+00:00</updated><id>https://giovannibriglia.github.io/blog/2024/causal-inference-pgmpy</id><content type="html" xml:base="https://giovannibriglia.github.io/blog/2024/causal-inference-pgmpy/"><![CDATA[<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">pgmpy.inference.CausalInference</span> <span class="kn">import</span> <span class="n">CausalInference</span>
<span class="kn">from</span> <span class="n">pgmpy.models.BayesianNetwork</span> <span class="kn">import</span> <span class="n">BayesianNetwork</span>
<span class="kn">from</span> <span class="n">pgmpy.estimators</span> <span class="kn">import</span> <span class="n">MaximumLikelihoodEstimator</span>
<span class="kn">import</span> <span class="n">networkx</span> <span class="k">as</span> <span class="n">nx</span>
<span class="kn">import</span> <span class="n">itertools</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Any</span>

<span class="k">class</span> <span class="nc">SingleCausalInference</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">,</span> <span class="n">causal_graph</span><span class="p">:</span> <span class="n">nx</span><span class="p">.</span><span class="n">DiGraph</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        Initializes the SingleCausalInference class.

        Parameters:
        data (pd.DataFrame): The dataset to be used for causal inference.
        causal_graph (nx.DiGraph): A directed acyclic graph representing causal relationships.
        </span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>
        <span class="n">self</span><span class="p">.</span><span class="n">causal_graph</span> <span class="o">=</span> <span class="n">causal_graph</span>

        <span class="c1"># Create and fit the Bayesian Network model
</span>        <span class="n">self</span><span class="p">.</span><span class="n">bayesian_network</span> <span class="o">=</span> <span class="nc">BayesianNetwork</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">bayesian_network</span><span class="p">.</span><span class="nf">add_edges_from</span><span class="p">(</span><span class="n">ebunch</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">causal_graph</span><span class="p">.</span><span class="nf">edges</span><span class="p">())</span>
        <span class="n">self</span><span class="p">.</span><span class="n">bayesian_network</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="n">estimator</span><span class="o">=</span><span class="n">MaximumLikelihoodEstimator</span><span class="p">)</span>

        <span class="c1"># Ensure the model is valid
</span>        <span class="k">assert</span> <span class="n">self</span><span class="p">.</span><span class="n">bayesian_network</span><span class="p">.</span><span class="nf">check_model</span><span class="p">()</span>

        <span class="c1"># Initialize the Causal Inference object
</span>        <span class="n">self</span><span class="p">.</span><span class="n">causal_inference</span> <span class="o">=</span> <span class="nc">CausalInference</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">bayesian_network</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_bayesian_network</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">BayesianNetwork</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">
        Returns the fitted Bayesian Network.

        Returns:
        BayesianNetwork: The fitted Bayesian Network.
        </span><span class="sh">"""</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">bayesian_network</span>

    <span class="k">def</span> <span class="nf">infer</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">interventions</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">],</span> <span class="n">target_variable</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
              <span class="n">evidence</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">adjustment_set</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">set</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">float</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">
        Perform causal inference to determine the effect of interventions on the target variable.

        Parameters:
        interventions (Dict[str, Any]): A dictionary of interventions (do-operations) on variables.
        target_variable (str): The variable of interest to query.
        evidence (Optional[Dict[str, Any]]): Observed evidence (optional).
        adjustment_set (Optional[set]): A set of variables for adjustment (optional).

        Returns:
        Dict[str, float]: The probability distribution of the target variable after intervention.
        </span><span class="sh">"""</span>
        <span class="c1"># Filter out the target variable from interventions to prevent conflicts
</span>        <span class="n">clean_interventions</span> <span class="o">=</span> <span class="p">{</span><span class="n">var</span><span class="p">:</span> <span class="n">val</span> <span class="k">for</span> <span class="n">var</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">interventions</span><span class="p">.</span><span class="nf">items</span><span class="p">()</span> <span class="k">if</span> <span class="n">var</span> <span class="o">!=</span> <span class="n">target_variable</span><span class="p">}</span>

        <span class="k">if</span> <span class="n">adjustment_set</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="c1"># If no adjustment set is provided, compute one automatically
</span>            <span class="n">intervention_vars</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">clean_interventions</span><span class="p">.</span><span class="nf">keys</span><span class="p">())</span>
            <span class="n">adjustment_set</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">itertools</span><span class="p">.</span><span class="nf">chain</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">causal_graph</span><span class="p">.</span><span class="nf">predecessors</span><span class="p">(</span><span class="n">var</span><span class="p">)</span> <span class="k">for</span> <span class="n">var</span> <span class="ow">in</span> <span class="n">intervention_vars</span><span class="p">]))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># Ensure the target variable is not part of the adjustment set
</span>            <span class="n">adjustment_set</span><span class="p">.</span><span class="nf">discard</span><span class="p">(</span><span class="n">target_variable</span><span class="p">)</span>

        <span class="c1"># Perform the query with the provided or computed parameters
</span>        <span class="n">query_result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">causal_inference</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span>
            <span class="n">variables</span><span class="o">=</span><span class="p">[</span><span class="n">target_variable</span><span class="p">],</span>
            <span class="n">do</span><span class="o">=</span><span class="n">clean_interventions</span><span class="p">,</span>
            <span class="n">evidence</span><span class="o">=</span><span class="n">clean_interventions</span> <span class="k">if</span> <span class="n">evidence</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">evidence</span><span class="p">,</span>
            <span class="n">adjustment_set</span><span class="o">=</span><span class="n">adjustment_set</span><span class="p">,</span>
            <span class="n">show_progress</span><span class="o">=</span><span class="bp">False</span>
        <span class="p">)</span>

        <span class="c1"># Convert the result (DiscreteFactor) to a dictionary format
</span>        <span class="n">result_dict</span> <span class="o">=</span> <span class="p">{</span>
            <span class="nf">str</span><span class="p">(</span><span class="n">state</span><span class="p">):</span> <span class="nf">float</span><span class="p">(</span><span class="n">query_result</span><span class="p">.</span><span class="n">values</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span>
            <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">state</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">query_result</span><span class="p">.</span><span class="n">state_names</span><span class="p">[</span><span class="n">target_variable</span><span class="p">])</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">result_dict</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">check_for_nan_or_infinite</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">
        Checks if the provided data contains NaN or infinite values.

        Parameters:
        data (Any): The data to check, can be a dict or set.

        Returns:
        bool: True if NaN or infinite values are found, False otherwise.
        </span><span class="sh">"""</span>
        <span class="k">def</span> <span class="nf">is_numeric</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">value</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">isnan</span><span class="p">(</span><span class="n">value</span><span class="p">).</span><span class="nf">any</span><span class="p">()</span> <span class="ow">or</span> <span class="n">np</span><span class="p">.</span><span class="nf">isinf</span><span class="p">(</span><span class="n">value</span><span class="p">).</span><span class="nf">any</span><span class="p">()</span>
            <span class="nf">except </span><span class="p">(</span><span class="nb">ValueError</span><span class="p">,</span> <span class="nb">TypeError</span><span class="p">):</span>
                <span class="k">return</span> <span class="bp">False</span>

        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">data</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
                <span class="k">if</span> <span class="nf">is_numeric</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
                    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Warning: </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s"> contains NaN or infinite values.</span><span class="sh">"</span><span class="p">)</span>
                    <span class="k">return</span> <span class="bp">True</span>
        <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="nb">set</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
                <span class="k">if</span> <span class="nf">is_numeric</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
                    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Warning: Set contains NaN or infinite values: </span><span class="si">{</span><span class="n">value</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
                    <span class="k">return</span> <span class="bp">True</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Unsupported data type: </span><span class="si">{</span><span class="nf">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">True</span>

        <span class="k">return</span> <span class="bp">False</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">validate_input_data</span><span class="p">(</span><span class="n">interventions</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">],</span> <span class="n">evidence</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span>
                            <span class="n">adjustment_set</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">set</span><span class="p">]):</span>
        <span class="sh">"""</span><span class="s">
        Validates input data to ensure it does not contain NaN or infinite values.

        Parameters:
        interventions (Dict[str, Any]): Interventions to be validated.
        evidence (Optional[Dict[str, Any]]): Evidence data to be validated.
        adjustment_set (Optional[set]): Adjustment set to be validated.

        Raises:
        ValueError: If NaN or infinite values are found in the data.
        </span><span class="sh">"""</span>
        <span class="k">if</span> <span class="n">SingleCausalInference</span><span class="p">.</span><span class="nf">check_for_nan_or_infinite</span><span class="p">(</span><span class="n">interventions</span><span class="p">):</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">Intervention data contains NaN or infinite values.</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">evidence</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">SingleCausalInference</span><span class="p">.</span><span class="nf">check_for_nan_or_infinite</span><span class="p">(</span><span class="n">evidence</span><span class="p">):</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">Evidence data contains NaN or infinite values.</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">adjustment_set</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">SingleCausalInference</span><span class="p">.</span><span class="nf">check_for_nan_or_infinite</span><span class="p">(</span><span class="n">adjustment_set</span><span class="p">):</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">Adjustment set data contains NaN or infinite values.</span><span class="sh">"</span><span class="p">)</span>

</code></pre></div></div> <p><a class="citation" href="#pearl2010causal">(Pearl, 2010)</a> miao</p>]]></content><author><name></name></author><category term="work"/><category term="concepts"/><summary type="html"><![CDATA[How to employ correctly causal inference in Python, what is causal inference and why you need it]]></summary></entry><entry><title type="html">Multithreading and Multiprocessing in Python</title><link href="https://giovannibriglia.github.io/blog/2024/multiprocessing-multithreading/" rel="alternate" type="text/html" title="Multithreading and Multiprocessing in Python"/><published>2024-08-13T00:00:00+00:00</published><updated>2024-08-13T00:00:00+00:00</updated><id>https://giovannibriglia.github.io/blog/2024/multiprocessing-multithreading</id><content type="html" xml:base="https://giovannibriglia.github.io/blog/2024/multiprocessing-multithreading/"><![CDATA[<p>Python is a programming language not designed for high-performance applications, its benefits come from the ease of learning and usability. Even though there are several arrangements you can employ to speed up your applications.</p> <p>In this blog post, I would like to show you what I have learnt regarding this topic and provide you some code and reference that could be useful.</p> <p>First of all, <em>functional programming</em> is the most valuable aspect to take into account before applying whatever multiprocessing-multithreading techniques. Here, what I think are interesting resources to consider are provided:</p> <ul> <li><a href="https://refactoring.com/">Refactoring Book</a></li> <li><a href="https://blog.cleancoder.com/">The Clean Coder’s Blog</a></li> <li><a href="https://docs.python.org/3/howto/functional.html">Python documentation</a></li> <li><a href="https://realpython.com/python-functional-programming/">RealPython Functional Programming</a></li> </ul> <p>Once you have assessed your program by exploiting the function programming best practices, you can start on reasoning about which task can be computed in parallel and which ones are slower in the code.</p> <p>It is worth noticing that, if your code follows in the right way the function programming best practices, introducing parallel computation parts will be straightforward.</p> <p>Before describing what are the differences between multithreading and multiprocessing and how to choose one respect to other, let us introduce some basic concepts, to provide some background knowledge.</p> <h4 id="thread-vs-process">Thread vs. Process</h4> <p>First of all, the thread is part of the process; moreover, a process can consist of multiple threads.</p> <h3 id="definitions">Definitions</h3> <ul> <li> <p><em>Process</em>: a process is an independent program in execution. It contains the program code, its current activity, and its allocated system resources, like memory and CPU time.</p> </li> <li> <p><em>Thread</em>: a thread is the smallest unit of execution within a process. Multiple threads can exist within the same process, sharing the same memory space but able to execute independently.</p> </li> </ul> <h3 id="memory-usage">Memory usage</h3> <ul> <li> <p><em>Process</em>: each process operates in its own memory space; the memory allocated to a process is isolated from other processes, which provides stability and security since one process cannot directly interfere with the memory of another process.</p> </li> <li> <p><em>Thread</em>: threads with the same process share the same memory space. This allows them to access the same data more efficiently, but also introduces risks of conflicts if multiple threads try to modify the same data simultaneously.</p> </li> </ul> <h3 id="communication">Communication</h3> <ul> <li> <p><em>Process</em>: processes generally communicate with each other through inter-process communication (IPC) mechanisms like pipes, message queues, or shared memory, which can be relatively slow and complex to implement.</p> </li> <li> <p><em>Thread</em>: since threads within the same process share the same memory, they can communicate directly by reading and writing to shared variables. This communication is faster and simpler than IPC between processes.</p> </li> </ul> <h3 id="overhead">Overhead</h3> <ul> <li> <p><em>Process</em>: processes have a higher overhead compared to threads because creating, managing and switching between processes requires more resources. The operating system needs to maintain separate memory and resources for each process.</p> </li> <li> <p><em>Thread</em>: threads have a lower overhead compared to processes. Creating and switching between threads within the same process is faster and requires fewer resources since they have the same memory space.</p> </li> </ul> <h3 id="use-case">Use Case</h3> <ul> <li> <p><em>Process</em>: processes are typically used when tasks need to be isolated from each other, such as running different applications on a computer.</p> </li> <li> <p><em>Thread</em>: threads are commonly used in situations where tasks are closely related and need to share data quickly and efficiently, such as in a web server handling multiple client requests concurrently.</p> </li> </ul> <h3 id="summary">Summary</h3> <ul> <li><strong>Isolation</strong>: processes are isolated from each other, while threads within the same process are not</li> <li><strong>Resource Sharing</strong>: threads share resources of the process they belong to, including memory and open files, while processes do not share their resources by default.</li> <li><strong>Creation and Context Switching</strong>: creating and switching between processes is more resource-intensive than creating and switching between threads.</li> </ul> <p>Useful links:</p> <ul> <li><a href="https://medium.com/capital-one-tech/python-guide-using-multiprocessing-versus-multithreading-55c4ea1788cd">Mario</a></li> <li><a href="https://www.geeksforgeeks.org/difference-between-multithreading-vs-multiprocessing-in-python/">Mario</a></li> </ul> <h4 id="multi-threading-vs-multi-processing">Multi-threading vs. Multi-processing</h4> <p>Multi-threading and multi-processing are both techniques used to achieve parallelism and improve the performance of a program by dividing tasks into smaller, concurrent units of execution. However, they differ in how they manage these units and use system resources.</p> <h3 id="definitions-1">Definitions</h3> <ul> <li> <p><em>Multi-processing</em>: multi-processing involves running multiple processes simultaneously, each with its own independent memory space. These processes can run on separate CPU cores and do not share memory, which eliminates the need for synchronization but increases memory usage.</p> </li> <li> <p><em>Multi-threading</em>: multi-threading involves threads within a single process sharing memory, leading to potential synchronization issues, while multi-processing uses separate memory spaces for each process, avoiding these issues but at the cost of higher memory usage and communication complexity.</p> </li> </ul> <h3 id="memory-usage-1">Memory usage</h3> <ul> <li> <p><em>Multi-processing</em>: each process in a multi-processing environment has its own memory space, so processes do not share data directly. This isolation can be beneficial for preventing conflicts but can lead to higher memory consumption since each process must maintain its own memory.</p> </li> <li> <p><em>Multi-threading</em>: since all threads within a multi-threaded application share the same memory space, they can easily access and modify shared data. However, this also means that multi-threading can lead to issues such as race conditions, where multiple threads try to modify the same data simultaneously, leading to inconsistent results.</p> </li> </ul> <h3 id="communication-1">Communication</h3> <ul> <li> <p><em>Multi-processing</em>: processes in a multi-processing setup typically communicate using IPC mechanisms. While secure and isolated, this communication is generally slower and more complex compared to the shared memory approach used in multi-threading.</p> </li> <li> <p><em>Multi-threading</em>: threads in a multi-threading program communicate by accessing shared memory. This is efficient, but requires careful synchronization (e.g., using mutexes or locks) to avoid conflicts and ensure data integrity.</p> </li> </ul> <h3 id="overhead-1">Overhead</h3> <ul> <li> <p><em>Multi-processing</em>: multi-processing has higher overhead than multi-threading because creating and managing separate processes requires more resources, including memory and CPU time for context switching between processes.</p> </li> <li> <p><em>Multi-threading</em>: multi-threading generally has lower overhead compared to multi-processing because threads share resources and the operating system does not need to create a separate memory space for each thread. However, the need for synchronization mechanisms can introduce some complexity and performance penalties.</p> </li> </ul> <h3 id="use-case-1">Use case</h3> <ul> <li> <p><em>Multi-processing</em>: multi-processing is ideal for tasks that require significant CPU computation and benefit from running in parallel without sharing memory, such as data processing, simulations, or applications that need to fully use multiple cores without worrying about synchronization issues</p> </li> <li> <p><em>Multi-threading</em>: multi-threading is well-suited for applications that require concurrent execution of tasks that share data or resources, such as a web server that handles multiple requests simultaneously.</p> </li> </ul> <h3 id="performance">Performance</h3> <ul> <li> <p><em>Multi-processing</em>: multi-processing can achieve true parallelism, even in languages with a GIL (like Python), because each process runs in its own memory space. This made it suitable for CPU-bound tasks that require heavy computation across multiple cores.</p> </li> <li> <p><em>Multi-threading</em>: multi-threading can provide significant performance improvements, especially on multi-core processors, but it is limited by the Global Interpreter Lock (GIL) in some languages like Python, which can prevent true parallel execution of threads.</p> </li> </ul> <h3 id="summary-1">Summary</h3> <ul> <li><em>Memory sharing</em>: multi-threading involves threads within a single process sharing memory, leading to potential synchronization issues, while multi-processing uses separate memory spaces for each process, avoiding these issues but at the cost of higher memory usage and communication complexity.</li> <li><em>Communication</em>: multi-threading uses shared memory for fast communication, while multi-processing relies on slower IPC mechanisms.</li> <li><em>Overhead</em>: multi-threading has lower overhead in terms of memory and context switching, while multi-processing has higher overhead due to the need to manage separate processes.</li> <li><em>Parallelism</em>: multi-processing can achieve true parallelism even in environments with limitations like the GIL, while multi-threading may be limited by such factors.</li> <li><em>Overall</em>: multi-threading is typically used for tasks that require concurrent execution with shared resources, while multi-processing is preferred for tasks that benefit from true parallelism and isolation.</li> </ul>]]></content><author><name></name></author><category term="work"/><category term="concepts"/><category term="code"/><summary type="html"><![CDATA[When use one respect to other, best practices, possible implementations]]></summary></entry><entry><title type="html">Career Update</title><link href="https://giovannibriglia.github.io/blog/2024/resume-and-phd-announcement/" rel="alternate" type="text/html" title="Career Update"/><published>2024-07-31T00:00:00+00:00</published><updated>2024-07-31T00:00:00+00:00</updated><id>https://giovannibriglia.github.io/blog/2024/resume-and-phd-announcement</id><content type="html" xml:base="https://giovannibriglia.github.io/blog/2024/resume-and-phd-announcement/"><![CDATA[<p>In the past year (2023), after coming back from Munich, where I completed an incredible exchange semester through the Erasmus+ program, I decided, also thanks to this experience, to pursue a PhD. Consequently, I applied to Politecnico di Milano, the University of Modena and Reggio Emilia, and the Italian National PhD in AI (based at the University of Pisa).</p> <p>To my surprise, I was accepted by all three institutions.</p> <p>In October 2023, I graduated from the University of Modena and Reggio Emilia with a degree in Mechatronics, Robotics, and Automation Engineering, achieving a score of 110 with laude. Despite this success, I felt disoriented. My experience at TUM in Munich left me with the impression that the most interesting opportunities were abroad, making me doubt if Italy was the right place for me. As a result, I decided to decline the positions in Italy and apply for some PhD abroad. I was rejected without even getting an interview from the ETH-AI Center, Max Planck Institute for Intelligent Systems, Munich Center for Machine Learning, Cyber Valley, ELLIS, EPFL, BMW, and relAI. Moreover, I was rejected from the University of Delft, for which, at least, I got an interview. Nevertheless, I won a PhD position at Eindhoven University and at the KIT lab, but I refused both offers, I was not so excited.</p> <p>Mostly in February, when most evaluations came in, I felt quite low. It’s not always easy to brush off disappointments, and I felt a bit adrift.</p> <p>Fortunately, since November, I have been working with Stefano Mariani and Franco Zambonelli, who welcomed me warmly into their research group. Together, we are exploring the intersection and the integration of model-free and model-based approaches, particularly focusing on reinforcement learning and causality.</p> <p>Over time, I’ve come to realize that while your environment undoubtedly influences you, the people you work with have an even greater impact. With this understanding, I am excited to collaborate with them.</p> <p>Additionally, I was given the opportunity to attend in-person the OxML “Representation Learning and Generative AI” program at the University of Oxford.</p> <p>Regarding my efforts to secure a PhD abroad, I was unsuccessful. However, this experience made me much stronger and more convinced of my goals. I realized that a rejection does not define a person’s abilities, and there are SIGNIFICANT factors influencing such decisions.</p> <p>I think I have found my way and I am meeting incredible people. They are the ones who feed my hunger for knowledge.</p> <p>Now, I am delighted to have been accepted into the National PhD program in AI, ranking first among all participants. Starting in November, I will be a PhD student and will continue working with Stefano Mariani and Franco Zambonelli. Additionally, I am seeking an engaging visiting research period during my PhD journey… (oh no, here we go again).</p>]]></content><author><name></name></author><category term="work"/><category term="update"/><summary type="html"><![CDATA[What is happened so far and PhD announcement]]></summary></entry></feed>